Mini-project development process
We suggest you develop your Blackjack game in two phases. 
The first phase will concentrate on implementing the basic logic of Blackjack 
while the second phase will focus on building a more full-featured version. 
In phase one, you will use buttons to control the game and 
print the state of the game to the console using print statements. 
In the second phase, you will replace the print statements by drawing images and 
text on the canvas and add some extra game logic.

In phase one, we will provide testing templates for four of the steps. 
The templates are designed to check whether your class implementations work correctly. 
You should copy your class definition into the testing template and 
compare the console output generated by running the template with the provided output. 
If the output matches, it is likely that your implementation of the class is correct.
DO NOT PROCEED TO THE NEXT STEP UNTIL YOUR CODE WORKS WITH THE PROVIDED TESTING TEMPLATE. 
Debugging code that uses incorrectly implemented classes is extremely difficult. 
Avoid this problem by using our provided testing templates.

Phase one

1-  Download the program template for this mini-project and 
    Review the class definition for the Card clyass. 
    This class is already implemented so your task is to familiarize yourself with the code. 
    Start by pasting the Card class definition into the provided testing template and 
    verifying that our implementation works as expected.

2-  Implement the methods "__init__", "__str__", "add_card" for the "Hand" class. 
    We suggest modeling a hand as a list of Card objects that are stored in a field 
    in the Hand object. 
    The "__init__" method should initialize the Hand object to have an empty list of Card objects. 
    The "add_card" should append a Card object to this list of cards. 
    The "__str__" method should return a string representation of a Hand object in a 
    human-readable form.For help in implementing the "__str__ "method, 
    refer back to the solution to question four in the Practice Exercises for week 5a. 
    Remember to use the string method for Card objects to convert each card in the hand's 
    list of cards into a string.
    (Don't convert a Card object into a string in add_card to make your string method work.) 
    Once you have implemented the "Hand" class, test it using the provided testing template.
    Testing
    http://www.codeskulptor.org/#user47_KeYBSqngq5_0.py
    
    Template
    http://www.codeskulptor.org/#user47_WMBzXb4aCA_0.py

3-  Implement the methods for the "Deck" class listed in the mini-project template. 
    We suggest modeling a deck of cards as list of cards. 
    You can generate this list using a pair of nested "for" loops or a list comprehension. 
    Remember to use the "Card" initializer to create your cards. Use "random.shuffle()" 
    to shuffle this deck of cards. Once you have implemented the "Deck" class, 
    test your Deck class using the provided testing template. 
    Remember that the deck is randomized after shuffling, so the output of the testing 
    template should match the output in the comments in form but not in exact value.


4-  Implement the handler for a "Deal" button that shuffles the deck and deals the two cards 
    to both the dealer and the player. The event handler "deal" for this button should shuffle 
        - shuffle the deck (stored as a global variable), 
        - create new player and dealer hands (stored as global variables), 
        - add two cards to each hand. 
            
    To transfer a card from the deck to a hand, you should use the "deal_card" method of the "Deck" class 
    and the "add_card" method of "Hand" class in combination. 
    The resulting hands should be printed to the console with an appropriate message indicating which hand is which.
    http://www.codeskulptor.org/#user47_WMBzXb4aCA_2.py

5-  Implement the "get_value" method for the "Hand" class. You should use the provided "VALUE" dictionary 
    to look up the value of a single card in conjunction with the logic explained in the video lecture 
    for this project to compute the value of a hand. Once you have implemented the "get_value" method, 
    test it using the provided testing template . 
    http://www.codeskulptor.org/#user47_WMBzXb4aCA_3.py

6-  Implement the handler for a "Hit" button. If the value of the hand is less than or equal to 21, 
    clicking this button adds an extra card to player's hand. If the value exceeds 21 after being hit, 
    print "You have busted".

7-  Implement the handler for a "Stand" button. If the player has busted, remind the player that they have busted. 
    Otherwise, repeatedly hit the dealer until his hand has value 17 or more (using a while loop). 
    If the dealer busts, let the player know. Otherwise, compare the value of the player's and dealer's hands. 
    If the value of the player's hand is less than or equal to the dealer's hand, the dealer wins. 
    Otherwise the player has won. Remember the dealer wins ties in our version.

    http://www.codeskulptor.org/#user47_WMBzXb4aCA_4.py






    final result 
    http://www.codeskulptor.org/#user47_WMBzXb4aCA_5.py