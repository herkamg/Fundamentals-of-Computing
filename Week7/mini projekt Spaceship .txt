Mini-project description - Spaceship
In our last two mini-projects, we will build a 2D space game RiceRocks that is inspired 
by the classic arcade game Asteroids (1979). Asteroids is a relatively simple game by 
today's standards, but was still immensely popular during its time. 
(Joe spent countless quarters playing it.) 
In the game, the player controls a spaceship via four buttons: two buttons that rotate 
the spaceship clockwise or counterclockwise (independent of its current velocity), 
a thrust button that accelerates the ship in its forward direction and a fire button 
that shoots missiles. Large asteroids spawn randomly on the screen with random velocities. 
The player's goal is to destroy these asteroids before they strike the player's ship. 
In the arcade version, a large rock hit by a missile split into several fast moving small 
asteroids that themselves must be destroyed. Occasionally, a flying saucer also crosses the 
screen and attempts to destroy the player's spaceship. Searching for "asteroids arcade" 
yields links to multiple versions of Asteroids that are available on the web 
(including an updated version by Atari, the original creator of Asteroids).


Mini-project development process
For this mini-project, you will implement a working spaceship plus add a single asteroid and 
a single missile. We have provided art for your game so its look and feel is that of a more 
modern game. You should begin by loading theprogram template.The program template includes 
all necessary image and audio files. Unfortunately, no audio format is supported by all major 
browsers so we have decided to provided sounds in the \color{red}{\verb|mp3|}mp3 format which is 
supported by Chrome (but not by Firefox on some systems). ("ogg" versions are also available.) 
We highly recommend using Chrome for the last two weeks of the class.
We have found that Chrome typically has better performance on games with more substantial 
drawing requirements and standardization on a common browser will make peer assessing projects 
more reliable.
Phase one - Spaceship

In this phase, you will implement the control scheme for the spaceship.This includes 
a complete Spaceship class and the appropriate keyboard handlers to control the spaceship. 
Your spaceship should behave as follows:

1-  The left and right arrows should control the orientation of your spaceship. 
    While the left arrow is held down, your spaceship should turn counter-clockwise. 
    While the right arrow is down, your spaceship should turn clockwise. 
    When neither key is down, your ship should maintain its orientation. 
    You will need to pick some reasonable angular velocity at which your ship should turn.

2-  The up arrow should control the thrusters of your spaceship. The thrusters should be on 
    when the up arrow is down and off when it is up. When the thrusters are on, you should 
    draw the ship with thrust flames. 
    When the thrusters are off, you should draw the ship without thrust flames.

3-  When thrusting, the ship should accelerate in the direction of its forward vector. 
    This vector can be computed from the orientation/angle of the ship using the provided 
    helper function "angle_to_vector". You will need to experiment with scaling each component 
    of this acceleration vector to generate a reasonable acceleration.   

4-  Remember that while the ship accelerates in its forward direction, but the ship always moves 
    in the direction of its velocity vector. Being able to accelerate in a direction different 
    than the direction that you are moving is a hallmark of Asteroids.

5-  Your ship should always experience some amount of friction. 
    (Yeah, we know, "Why is there friction in the vacuum of space?". 
    Just trust us there is in this game.) 
    This choice means that the velocity should always be multiplied by a constant factor less than 
    one to slow the ship down. It will then come to a stop eventually after you stop the thrusters.